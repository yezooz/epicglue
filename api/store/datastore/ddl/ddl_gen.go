// Code generated by go-bindata.
// sources:
// postgres/1_init.sql
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x92\x41\x6f\xba\x40\x10\xc5\xef\xfb\x29\xe6\xa8\xf9\xff\x4d\x6c\xaf\x9e\xa8\xd0\x94\x16\x81\xe0\xd2\xd4\xd3\x66\x0b\x13\x3b\x29\x0b\x64\x19\xad\x7e\xfb\x66\xb5\x51\x44\xbd\xfe\xde\x7b\x33\x2f\xbb\x33\x99\xc0\x3f\x43\x6b\xab\x19\x21\x6f\x85\x98\x67\x81\x27\x03\x90\xde\x53\x14\x00\x31\x1a\x18\x09\x00\x2a\x21\xcf\x43\x1f\xd2\x2c\x5c\x78\xd9\x0a\xde\x82\xd5\x7f\x87\x19\x8d\xa2\x12\xde\xbd\x6c\xfe\xe2\x65\xa3\xc7\xe9\x74\x0c\x71\x22\x21\xce\xa3\xe8\x64\xe0\x7d\x8b\x3d\xcb\xa5\xc3\x60\x49\xfa\xbe\x05\x9c\xa7\x43\xbb\xa5\x02\x55\xad\xcd\xfd\x41\x4c\x5c\x21\xc8\xe0\xa3\x17\x2c\xb1\x2b\x2c\xb5\x4c\x4d\x3d\x50\xf4\x86\xbf\x1a\x7b\x1a\xf6\x30\x2c\x7e\xd4\xd5\xa1\x1d\xbc\x2e\x93\xf8\x1c\xbd\xc5\xaa\xa6\xd0\x6e\xcb\xb1\xe2\xe5\xaa\x93\xd6\x36\x54\x33\xa4\x49\x18\xf7\x55\xaa\xbf\xff\x02\xc9\x00\x2b\x67\x1f\xcc\x72\x18\x77\x43\xcc\x7a\xdd\x9d\x1b\x39\xb2\xa5\x8e\x3e\xa9\x22\xde\xdf\x7f\xd6\x43\x9f\x0e\x2e\xea\x14\x8d\x31\x78\x4d\x2d\x6a\xc6\x52\x69\x06\x19\x2e\x82\xa5\xf4\x16\x29\xf8\xc1\xb3\x97\x47\x12\x8a\x8d\xb5\x58\xb3\x62\x32\xd8\xb1\x36\xad\x4b\x6c\xda\xf2\x3a\xd1\xfb\x97\x0a\x6f\xaa\x62\x3c\x13\xa2\x7f\x92\x7e\xf3\x53\x0b\xe1\x67\x49\xda\x3b\x49\xb5\x9b\xfd\x06\x00\x00\xff\xff\xbb\x99\x36\xba\xb7\x02\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 695, mode: os.FileMode(420), modTime: time.Unix(1483716401, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres/1_init.sql": postgres1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
