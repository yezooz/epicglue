// Code generated by go-bindata.
// sources:
// postgres/1_init.sql
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x92\x41\x4f\x83\x40\x14\x84\xef\xfb\x2b\xde\xb1\x8d\x36\xa9\x5e\x7b\xc2\x82\x11\xa5\x40\xe8\x62\x6c\x8c\x21\x2b\xbc\xb4\x2f\xb2\x0b\x81\xd7\x6a\xff\xbd\x59\x1a\x2b\x6d\xe9\x75\xbe\x99\xd9\x81\xdd\xc9\x04\x6e\x34\xad\x1b\xc5\x08\x69\x2d\xc4\x3c\xf1\x1c\xe9\x81\x74\x1e\x02\x0f\x88\x51\xc3\x48\x00\x50\x01\x69\xea\xbb\x10\x27\xfe\xc2\x49\x56\xf0\xe2\xad\x6e\xad\xcc\xa8\xb3\x3f\x16\x46\x12\xc2\x34\x08\x8e\x80\xf7\x35\xc2\xab\x93\xcc\x9f\x9c\x64\x74\x3f\x1d\x9f\x38\x34\x16\xa4\xae\x5b\xc0\x7a\x5a\x6c\x76\x94\x63\x66\x94\xbe\x5e\xc4\xc4\x25\x82\xf4\xde\xe4\x69\xb8\xc0\x36\x6f\xa8\x66\xaa\xcc\x00\x55\x5b\xde\x54\xcd\xb1\xf4\x6e\x7a\xd6\x7a\xe0\x59\xb7\x12\x9e\x97\x51\xf8\x1f\x1d\xd2\xca\x2a\x57\xf6\xa4\xc3\xd4\xc3\x71\x17\xac\xae\xc8\x30\xc4\x91\x1f\xf6\x29\x99\xaf\x81\x7d\x56\xce\xac\xfd\xac\xcb\xca\xf8\x73\x2e\xb3\x5a\xb7\x9d\xf4\xfe\x71\xfc\x82\x1d\xb5\xf4\x49\x25\xf1\xbe\xff\xeb\x2c\xe9\x76\xb4\x70\x32\x23\xaf\xb4\xc6\x4b\x75\xa3\x8c\xc1\xb2\xed\x2e\xb8\xd7\x9d\x37\xa8\x18\x8b\x4c\x31\x48\x7f\xe1\x2d\xa5\xb3\x88\xc1\xf5\x1e\x9d\x34\x90\x90\x6f\x9b\x06\x0d\x67\x4c\x1a\x5b\x56\xba\xb6\x89\x6d\x5d\x5c\x26\x7a\x77\x55\xe2\x20\x15\xe3\x99\x10\xfd\x27\xea\x56\xdf\x46\x08\x37\x89\xe2\xde\x13\x9d\xfd\x06\x00\x00\xff\xff\xf3\x40\x71\xd2\xc5\x02\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 709, mode: os.FileMode(420), modTime: time.Unix(1483708170, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres/1_init.sql": postgres1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
