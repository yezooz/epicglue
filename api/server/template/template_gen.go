// Code generated by go-bindata.
// sources:
// files/index.html
// files/login.html
// files/logout.html
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x93\x51\x6f\xd3\x30\x10\xc7\x9f\xc9\xa7\x38\xfc\x3a\x62\xab\xe2\x05\x41\x1c\x84\xa0\x48\x3c\x54\x43\x5d\x85\xc4\xd3\xe4\xda\x97\xe6\x36\xc7\x0e\xf1\x35\x5d\x15\xf2\xdd\x51\xd6\x86\x4d\x68\x0f\xc0\x9e\xac\x3b\xdf\xff\xf7\xf7\x9d\xed\xe2\xe5\xa7\xcb\x8f\x9b\xef\x5f\x97\x50\x73\xe3\xcb\xac\x98\x17\x34\xae\xcc\x00\x8a\x06\xd9\x80\xad\x4d\x97\x90\xb5\xd8\x73\x95\xbf\x11\xea\xd1\x4e\x0c\x8c\x81\xb5\x38\x90\xe3\x5a\x3b\xec\xc9\x62\x7e\x1f\xbc\x02\x0a\xc4\x64\x7c\x9e\xac\xf1\xa8\x17\x02\x82\x69\x50\x8b\x9e\xf0\xd0\xc6\x8e\x9f\xe4\x10\x6a\x74\x3b\x14\x50\x33\xb7\x39\xfe\xd8\x53\xaf\xc5\x5d\xbe\x37\xb9\x8d\x4d\x6b\x98\xb6\x1e\x27\xe1\x8b\x61\x00\xaa\x40\xda\xd4\x55\x30\x8e\x27\xca\x89\x3f\xa5\x72\x8e\xb7\x18\xc4\x03\x77\x18\x7e\xd7\x0a\x50\xe5\x30\x00\x06\x07\xe3\x38\x9d\xc0\x53\xb8\x85\xba\xc3\x4a\x8b\xc9\x35\xbd\x55\xaa\x8a\x81\x93\xdc\xc5\xb8\xf3\x68\x5a\x4a\xd2\xc6\x46\xd9\x94\xde\x57\xa6\x21\x7f\xd4\xeb\xb8\x8d\x1c\x05\x74\xe8\xb5\x48\x7c\xf4\x98\x6a\xc4\xb9\xa5\xff\x06\x5e\xac\x62\x78\x36\x95\x6c\x0c\x33\x76\x65\x18\x3b\x32\xfe\xe2\x8b\x8d\x21\xfd\x05\x59\x25\x36\x4c\x56\x99\xb6\x95\x36\xfd\x8b\xa2\x32\xfd\xe4\x2c\xc9\xce\x1d\x4c\xa1\x00\x3e\xb6\xa8\x05\x35\x66\x87\xea\x2e\xbf\xcf\xa9\x32\x2b\xd4\xe9\x89\x15\xdb\xe8\x8e\x65\x56\x38\xea\x81\x9c\x16\xa6\x6d\x45\x59\x28\x47\x7d\x99\x15\xc9\x76\xd4\xf2\x64\x78\xa0\xe0\xe2\x41\x5e\x6d\x3e\x6c\x96\xd7\x9f\xd7\x97\xab\xeb\xab\xe5\xfa\xdb\x72\xad\xa7\x7b\x85\x9f\x70\x93\x62\x80\x71\x7c\x97\x15\x6a\x16\x9d\xd5\x90\x3a\xfb\x30\x30\x1b\x1d\xca\x1d\x72\xe3\xbc\xa4\xa8\x16\x72\x21\x5f\xab\xe6\x3c\x24\xd9\x50\x90\x37\x69\xf2\x7f\x12\xf2\x78\x36\x7f\x94\xa9\x73\x1b\xea\xf4\x7f\x7e\x05\x00\x00\xff\xff\xa7\x48\x48\x02\x57\x03\x00\x00")

func filesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesIndexHtml,
		"files/index.html",
	)
}

func filesIndexHtml() (*asset, error) {
	bytes, err := filesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/index.html", size: 855, mode: os.FileMode(420), modTime: time.Unix(1480319874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x93\x3f\x8f\xd4\x30\x10\xc5\xfb\xfd\x14\x66\xda\x23\xb1\x56\x34\x08\xc5\x4b\x01\x14\x48\x9c\x38\x21\x28\x28\x67\x9d\x49\x32\x60\x7b\x8c\x3d\xd9\x3f\x7c\x7a\x94\xfd\x73\x87\xd0\x16\x48\x57\xd9\x6f\xfc\xe6\x27\x7b\x9e\xdc\xbd\x78\xff\xf9\xdd\xd7\xef\x0f\x1f\xcc\xa4\x31\x6c\x56\xdd\x75\x21\xec\x37\x2b\x63\xba\x48\x8a\xc6\x4f\x58\x2a\xa9\x83\x59\x87\xe6\x35\xd8\xbf\x4e\x24\x29\x25\x75\xb0\xe7\x5e\x27\xd7\xd3\x8e\x3d\x35\x27\xf1\xd2\x70\x62\x65\x0c\x4d\xf5\x18\xc8\xad\xc1\x24\x8c\xe4\x60\xc7\xb4\xcf\x52\xf4\x26\x87\xc9\x51\x3f\x12\x98\x49\x35\x37\xf4\x6b\xe6\x9d\x83\x43\x33\x63\xe3\x25\x66\x54\xde\x06\xba\x34\x06\x4e\x3f\xcd\x54\x68\x70\xb0\x98\xeb\x1b\x6b\x07\x49\x5a\xdb\x51\x64\x0c\x84\x99\x6b\xeb\x25\x5a\x5f\xeb\xdb\x01\x23\x87\xa3\xfb\x22\x5b\x51\x01\x53\x28\x38\xa8\x7a\x0c\x54\x27\x22\x7d\x2e\xf0\xee\x5e\xd2\xb3\xa9\xec\x25\x5d\xb1\xf7\xa8\x54\x18\xc3\xdd\x47\x2f\xa9\xfe\x07\xd9\x56\x45\x65\x6f\x07\xdc\x2d\x9c\x96\xfd\xf5\x3e\x8b\x04\xa3\xc7\x4c\x0e\x38\xe2\x48\xf6\xd0\x9c\x6a\x76\xb3\xea\xec\x39\xe7\x6e\x2b\xfd\xf1\x84\x1c\xa4\x44\x83\x5e\x59\x92\x03\x8b\xb3\x4e\x52\xf8\x37\x81\x89\xa4\x93\xf4\x0e\xb2\x54\x85\xc5\x6a\x4c\xc7\x29\xcf\x7a\x41\x2b\x1d\x14\x4c\x0e\xe8\x69\x92\xd0\x53\x71\xf0\xad\x52\x59\x12\xbf\xe6\x3e\x3f\x6a\x7b\x03\x90\xb1\xd6\xbd\x94\xfe\x1f\xc8\xc3\x63\xf9\x0c\x79\xb2\xdd\x82\xd4\x79\x1b\x59\xc1\xec\x30\xcc\xe4\xe0\x93\x8c\x9c\x2e\xce\xce\x2e\x6f\x3b\xed\xaa\x2f\x9c\xd5\xd4\xe2\x9f\x22\xf1\xd2\x53\x3b\x92\xc6\x3e\xb4\x2c\x76\xdd\xae\xdb\x57\x36\x5e\x62\x68\x23\xa7\xf6\x47\x85\x4d\x67\xcf\xbd\xcb\xe8\xce\x33\xeb\xec\xf9\xc7\xfc\x09\x00\x00\xff\xff\x5c\x2b\x0e\xfb\x49\x03\x00\x00")

func filesLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesLoginHtml,
		"files/login.html",
	)
}

func filesLoginHtml() (*asset, error) {
	bytes, err := filesLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/login.html", size: 841, mode: os.FileMode(420), modTime: time.Unix(1480319874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesLogoutHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\xf1\x77\xf7\x0f\x0d\xe1\x02\x04\x00\x00\xff\xff\xed\x29\x18\x9d\x07\x00\x00\x00")

func filesLogoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesLogoutHtml,
		"files/logout.html",
	)
}

func filesLogoutHtml() (*asset, error) {
	bytes, err := filesLogoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/logout.html", size: 7, mode: os.FileMode(420), modTime: time.Unix(1480319874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/index.html":  filesIndexHtml,
	"files/login.html":  filesLoginHtml,
	"files/logout.html": filesLogoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"index.html":  &bintree{filesIndexHtml, map[string]*bintree{}},
		"login.html":  &bintree{filesLoginHtml, map[string]*bintree{}},
		"logout.html": &bintree{filesLogoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
